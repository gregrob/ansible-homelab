---
# Role to set up SSH key-based authentication with a secrets server and decrypt secrets using age encryption.
# Assumes age is installed on the target system.
#
# Steps performed:
#  1. Set SSH key base path for secrets server connection
#  2. Ensure .ssh directory exists with proper permissions
#  3. Generate ED25519 SSH key pair for secrets server (if not exists)
#  4. Read the generated public key into a variable
#  5. Set correct permissions on the public key file
#  6. Create SSH config file with secure permissions if it doesn't exist
#  7. Add SSH config entry to automatically use the secrets server key and user
#  8. Add secrets server to known_hosts to avoid SSH host key verification prompts
#  9. Add secrets server host dynamically to inventory
#  10. Run secrets server operations (add SSH key to authorized_keys, encrypt secrets) - done under included tasks
#  11. Register secrets file path for decryption
#  12. Construct SSH command for decrypting secrets via age
#  13. Execute decryption command and display output

- block:

  # Create a variable for the filename base for the secrets server SSH key    
  - name: Set SSH key base path for secrets key
    ansible.builtin.set_fact:
      secrets_key_filename_base: "/home/{{ admin_user }}/.ssh/id_ed25519_secrets-server"

  # Ensure the .ssh directory exists with correct permissions and ownership
  - name: ensure ~/.ssh directory exists
    ansible.builtin.file:
      path: "/home/{{ admin_user }}/.ssh"
      state: directory
      mode: '0700'
      owner: "{{ admin_user }}"
      group: "{{ admin_group }}"

  # Generate a new SSH key for the secrets server if one doesn't already exist
  - name: generate SSH key for Secrets server
    ansible.builtin.openssh_keypair:
      path: "{{ secrets_key_filename_base }}"
      type: ed25519
      force: false   # do not overwrite if key already exists
      comment: "{{ secrets_key_comment | default(admin_user ~ '@' ~ inventory_hostname ~ ' (secrets server)') }}"
      mode: '0600'   # private key permission

  # Read the generated public key into a variable
  - name: Read generated public key
    ansible.builtin.slurp:
      src: "{{ secrets_key_filename_base }}.pub"
    register: secrets_pubkey_content

  # Fix permissions on the public key to be world-readable  
  - name: Set correct permissions on public key
    ansible.builtin.file:
      path: "{{ secrets_key_filename_base }}.pub"
      mode: '0644'

  # Create SSH config file with secure permissions if it doesn't exist
  - name: Ensure SSH config file exists with proper permissions
    ansible.builtin.file:
      path: "/home/{{ admin_user }}/.ssh/config"
      state: touch
      mode: '0600'
      owner: "{{ admin_user }}"
      group: "{{ admin_group }}"

  # Add SSH config entry to automatically use the secrets server key and user
  - name: Add SSH config entry for secrets.max.lan
    ansible.builtin.blockinfile:
      path: "/home/{{ admin_user }}/.ssh/config"
      owner: "{{ admin_user }}"
      group: "{{ admin_group }}"
      mode: '0600'
      create: yes
      marker: "# {mark} ANSIBLE MANAGED SSH CONFIG for {{ secret_server.hostname }}"
      block: |
        Host {{ secret_server.hostname }}
          User {{ secret_server.secrets_user }}
          IdentityFile {{ secrets_key_filename_base }}
          IdentitiesOnly yes

  # Add secrets server to known_hosts to avoid SSH host key verification prompts
  - name: Add secrets server to known_hosts
    ansible.builtin.known_hosts:
      name: "{{ secret_server.hostname }}"
      key: "{{ lookup('pipe', 'ssh-keyscan -H ' + secret_server.hostname) }}"
      path: "/home/{{ admin_user }}/.ssh/known_hosts"

  # Add the secrets server host to the inventory dynamically
  - name: Add secret server host dynamically
    ansible.builtin.add_host:
      name: secrets_server
      ansible_host: "{{ secret_server.hostname }}"
      ansible_user: "{{ secret_server.admin_user }}"
      ansible_ssh_pass: "{{ secret_server.admin_password }}"
      ansible_become_password: "{{ secret_server.admin_password }}"
      groups:
        - secrets_access

  # Run additional secrets server operations on the dynamically added secrets_server host
  - name: Run secrets server operations on secrets_server
    ansible.builtin.include_tasks: secrets_server_tasks.yaml
    vars:
      ansible_host: "{{ secret_server.hostname }}"
      ansible_user: "{{ secret_server.admin_user }}"
      ansible_ssh_pass: "{{ secret_server.admin_password }}"
      ansible_become_password: "{{ secret_server.admin_password }}"

  # Register the secrets file path for decryption
  - name: Register secrets file path for decryption
    ansible.builtin.set_fact:
      secrets_file_path: "/srv/secrets/encrypted/test/test-code-string.secret.age"

  # Construct the command using a template
  - name: Construct command for decrypting secrets
    ansible.builtin.set_fact:
      decrypt_command: >-
        ssh {{ secret_server.secrets_user }}@{{ secret_server.hostname }}
        'cat {{ secrets_file_path }}' | age -d -i {{ secrets_key_filename_base }}

  # Decrypt the secrets using the constructed command
  - name: Decrypt the secrets using the constructed command
    ansible.builtin.shell: "{{ decrypt_command }}"
    register: decrypted_output

  # Display the output of the decryption command
  - name: Display output of encryption command
    ansible.builtin.debug:
      var: decrypted_output.stdout

  become: yes
  become_user: "{{ admin_user }}"
